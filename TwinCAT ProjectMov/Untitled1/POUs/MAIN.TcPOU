<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{af2f60e7-4dc5-45ab-9fa0-122a30a9981d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	LinearAxis : axis;
	RotationAxis : axis;
	
	linearPos :real;
	linearVel :INT ;
	executeLinearMove :BOOL;
	executehometostop: BOOL;
	linearhomingdone: BOOL;
	linearmovingdone: BOOL;
	linearsearchinghoming: LREAL;
	linearposafterhoming: LREAL;
	
	rotationPos : REAL;
	rotationVel :INT;
	executeRotationMove : BOOL;	
	executehometozero:BOOL;
	rotationhomingdone : BOOL;
	rotationmovingdone: BOOL;
	rotationsearchinghoming: LREAL;
	rotationposafterhoming: lreal;
	
	
	
	enableaxis: BOOL;
	resetaxis : BOOL;
	
	state: INT :=0;

	timer1 : ton;
	timer2 : ton;
	timerstart1: BOOL;
	timerstart2: BOOL;
	timer2reached: BOOL;
	timer1reached: BOOL;
	timertime1: TIME;
	timertime2: TIME;
	elapsedtime1: TIME;
	elapsedtime2: TIME;
	
	//xCordinates :  ARRAY [0..10000] OF REAL := [200,500,540,300,0];
	//rotationpoints :  ARRAY [0..10000] OF REAL;
	//yCordinates :  ARRAY [0..10000] OF REAL;
	arraynumber : INT := 1;
	
	
	//digi intputs
	resetButton: BOOL;
	startbutton: BOOL;
	stopbutton: BOOL; 
	estop1 : BOOL;
	estop2 : BOOL;
	doorswitch :BOOL;
	powerok: BOOL;
	refsensorrotation: BOOL;
	refsensorlinear: BOOL;

	
	tool2posreached: BOOL;
	tool1posreached: BOOL; 
	
	// digi outputs
	enabletool1: BOOL; // relais
	enabletool2: BOOL; // relais
	initresetlamp : BOOL; // lamp
	enableprocesslamp: BOOL; // lamp	
	errorlamp: BOOL;	// lamp
	tool1pos: BOOL; // valve
	tool2pos: BOOL; // valve
	enableledstrip : BOOL; // light for camera
	
	
	// internal variables
	startsecondround: BOOL;
	programstarted:bool:= false;
	
	// vision communication
	takepicturecommand: BOOL;
	searchingForgear : BOOL; // written by vision system | showed in visu
	gearnotfound : BOOL; // written by vision system | showed in visu
	gearfounded :BOOL; // written by vision system | showed in visu
	sendingdata : BOOL; // written by vision system | showed in visu
	coordinatesreceived: BOOL; // written by vision system


(*
	
	{attribute 'OPC.UA.DA':='1'} // Enables a variable for OPC UA
	{attribute 'OPC.UA.DA.StructuredType':='3'} //Enables StructuredType for a STRUCT or a function block
	stOPCUA : ST_OPCUA;
	
	{attribute 'OPC.UA.DA' := '1'} 
	{attribute 'OPC.UA.DA.Access' := '3'} // 0 = none, 1 = read-only, 2 = write access only, 3 = read and write access (default if no tag is used)
	nCounter : INT :=20;

	{attribute 'OPC.UA.DA' := '1'} 
	{attribute 'OPC.UA.DA.Access' := '3'} // 0 = none, 1 = read-only, 2 = write access only, 3 = read and write access (default if no tag is used)
	teller : INT;
	
	{attribute 'OPC.UA.DA' := '1'} 
	{attribute 'OPC.UA.DA.Access' := '3'}
	bStart : BOOL;
	
	{attribute 'OPC.UA.DA' := '1'} 
	jow : BOOL;
	
	
	{attribute 'OPC.UA.DA' := '1'} 
	{attribute 'OPC.UA.DA.Description' := 'My Test Integer Array'} //Sets a text for the OPC UA attribute "Description".
	aMyNumbers : ARRAY[1..5] OF INT;
	
*)

	X_coords: ARRAY[1..9999] OF REAL;   	// Array to store X coordinates
    Y_coords: ARRAY[1..9999] OF REAL;   	// Array to store Y coordinates
	
	status_message 		: STRING(255);  	// Ontvangt status van Python
	next_move		 	: STRING(255);  	// Ontvangt next move van Python
	StartProcess 		: BOOL := FALSE; 	// Variabele om Python te triggeren
	
	Restart				: BOOL;				// Varaiable om alleen de array te verwijderen wanneer proces klaar is
	PulseTimer : TON;      					// Timer voor puls
	i :INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
IF bStart THEN
	nCounter := nCounter + 1;
END_IF

*)

(*
PulseTimer(IN := StartProcess, PT := T#500MS);

IF PulseTimer.Q THEN
    StartProcess := FALSE; 					// Reset de puls automatisch
END_IF
*)

IF StartProcess AND NOT Restart THEN
    FOR i := 1 TO 9999 DO
        x_coords[i] := 0.0;   				// Stel X-coördinaten in op 0
        y_coords[i] := 0.0;   				// Stel Y-coördinaten in op 0
    END_FOR
END_IF

IF startprocess THEN
	coordinatesreceived := FALSE;
END_IF

IF NOT resetbutton AND NOT programstarted THEN
	state := 0;
ELSIF powerok AND NOT programstarted THEN
	state:= 10;	
END_IF


IF stopbutton THEN
	state := 300;
END_IF

IF estop1 OR estop2 OR NOT doorswitch THEN
	state := 400;
END_IF

CASE state OF
	
	0:
	errorlamp := FALSE;
	timerstart1:=NOT timer1reached;
	timertime1:= T#500MS;
	IF timer1reached THEN
		initresetlamp := NOT initresetlamp;
	END_IF
	IF resetbutton THEN
		state := 10; 
		errorlamp := FALSE;
	END_IF

	10: //waiting for start up program
	programstarted := true;
	initresetlamp := TRUE;
	timerstart1:=TRUE;
	timertime1:= T#3S;
	IF timer1reached THEN
		timerstart1 := FALSE;
		state:= 20;
	END_IF
	
	20: // start resetting axis
	resetaxis:=TRUE;
	
	timerstart1:=TRUE;
	timertime1:= T#2S;
	IF  tool1posreached or true THEN
		timerstart1 := FALSE;
		state:= 30;
	ELSIF timer1reached  THEN
		errorlamp := TRUE;
	END_IF
	
	30: // stop resetting axis
	resetaxis:= FALSE;
	
	timerstart1:=TRUE;
	timertime1:= T#2S;
	IF timer1reached THEN
		timerstart1 := FALSE;
		state:= 40;
	END_IF
	
	40: // enable axis
	enableaxis := TRUE;

	timerstart1:=TRUE;
	timertime1:= T#2S;
	IF timer1reached THEN
		timerstart1 := FALSE;
		state:= 50;
	END_IF
	
	50: // homing axis
	rotationsearchinghoming := 10;
	linearsearchinghoming := 40;
	rotationposafterhoming:= 0;
	linearposafterhoming := 325;
	executehometostop:= TRUE; // for linear axis
	executehometozero:= TRUE; // rotation axis

	IF linearhomingdone AND rotationhomingdone THEN
		state:= 60;

	END_IF
	
	60: // go to start pos
	linearVel := 250;
	rotationvel := 90;
	linearPos := 325;
	rotationpos := 180;
	

	
	(*
	FOR i := 1 TO 10000 DO
    	xcordinates[i] := 0; 
		rotationpoints[i] := 0;
	END_FOR
	*)
	
	timerstart1:=TRUE;
	timertime1:= T#1S;
	
	IF timer1reached THEN
		executeLinearMove := TRUE;
		executerotationmove:= TRUE;	
		state := 61;
		timerstart1 := FALSE;
	END_IF;

	
	61:
	timerstart1:=TRUE;
	timertime1:= T#2S;
	tool1pos:= TRUE; 
	IF timer1reached AND tool1posreached  THEN 
		tool2pos := FALSE;
	
		enabletool1 := FALSE; // for stopping tools after stop button pressed
		//enabletool2 := FALSE;
		
		enabletool2 := FALSE; // disabling tool 2 after the second round
		enableprocesslamp := FALSE; // show that the process is finished
		timerstart1 := FALSE;
		state := 70;			
	END_IF
	
	
	70: // wait until start pos is reached
	IF linearmovingdone AND rotationmovingdone THEN
		executeLinearMove := FALSE;	
		executerotationmove := FALSE;	
		initresetlamp := FALSE; // show that the initialisation is done
		state:= 80;
	END_IF;
	
	80: // wait on start command
	timerstart1:= NOT timer1reached;
	timertime1:= T#500MS;
	IF timer1reached THEN
		enableprocesslamp := NOT enableprocesslamp;
	END_IF	
	
	IF startbutton THEN
		timerstart1 := FALSE;
		enableprocesslamp := TRUE;
		state := 81;
	END_IF
	
	
	81: // delay send take picture command
	timerstart1:=TRUE;
	timertime1:= T#3S;
	
	IF timer1reached THEN
		timerstart1 := FALSE;
		enableledstrip := TRUE;
		StartProcess := TRUE; //command to python
		
		PulseTimer(IN := StartProcess, PT := T#500MS);

		IF PulseTimer.Q THEN
			StartProcess := FALSE; 					// Reset de puls automatisch
			state := 90;
		END_IF
		
		
	END_IF
	
	90: // wait until confirmation receiving coordinates
	IF coordinatesreceived THEN
		takepicturecommand := FALSE;
		enableledstrip := FALSE;
		timerstart1:=TRUE;
		timertime1:= T#2S;
	ELSIF gearnotfound THEN
		enableledstrip := FALSE;
		state := 80;	
	END_IF	
	
	IF timer1reached THEN
		state := 100;
	END_IF
	
	100: // go to working pos
	linearVel := 250;
	rotationvel := 30;
	linearPos := 10;
	rotationpos := 0;
	
	timerstart1:=TRUE;
	timertime1:= T#10MS;
	
	IF timer1reached THEN
		IF NOT startsecondround THEN
			enabletool1 := TRUE;
		END_IF
		executeLinearMove := TRUE;
		executerotationmove:= TRUE;				
		timerstart1 := FALSE;
		state := 110;
	END_IF
	
	
	110: // wait untill working pos is reached
	IF linearmovingdone AND rotationmovingdone THEN
		executeLinearMove := FALSE;	
		executerotationmove := FALSE;	
		state:= 120;
	END_IF;
	
	
	120: // set coordinate pos
	linearVel := 50;
	rotationvel := 30;
	linearPos := x_coords[arraynumber];
	rotationpos := y_coords[arraynumber];
	timerstart1:=TRUE;
	timertime1:= T#10MS;
	
	
	IF timer1reached THEN
		executeLinearMove := TRUE;
		executerotationmove:= TRUE;
		timerstart1 := FALSE;
		state := 130;
	END_IF
	
	130: //execute coordinate pos
	IF linearmovingdone AND rotationmovingdone THEN
		executeLinearMove := FALSE;	
		executerotationmove := FALSE;	
		state:= 120;
		IF (x_coords[arraynumber]) = 0 AND NOT startsecondround THEN
			state := 140;
		ELSIF  (x_coords[arraynumber]) = 0 AND startsecondround THEN
			startsecondround := FALSE;
			state := 60;
		END_IF
		arraynumber := arraynumber +10;	
	END_IF
	
	140: // move away from tool pos
	linearVel := 250;
	rotationvel := 50;
	linearPos := 200;
	rotationpos := 180;
	
	timerstart1:=TRUE;
	timertime1:= T#10MS;
	
	IF timer1reached THEN
		executeLinearMove := TRUE;
		executerotationmove:= TRUE;
		timerstart1 := FALSE;
		state := 160;
	END_IF

	
	160: // wait until away from tool pos is reached and disable tool 1, enanble tool 2, switch tool
	IF linearmovingdone AND rotationmovingdone THEN
		enabletool1 := FALSE;
		enabletool2 := TRUE;
		
		tool1pos := FALSE;
		tool2pos := TRUE;
		timerstart1:=TRUE;
		timertime1:= T#3S;
		
		executeLinearMove := FALSE;	
		executerotationmove := FALSE;	
	END_IF;
	
	IF tool2posreached THEN
		state := 100;
		arraynumber := 1;
		startsecondround := TRUE;
		errorlamp:= false;
	ELSIF timer1reached THEN
		errorlamp:= TRUE;		
	END_IF
	
	
	300: // stop steps
	executeLinearMove := FALSE;	
	executerotationmove := FALSE;	
	
	timerstart1:=TRUE;
	timertime1:= T#10MS;
	
	IF timer1reached THEN
		timerstart1 := FALSE;
		state := 60;
	END_IF
	
	400: //noodstop
	executeLinearMove := FALSE;	
	executerotationmove := FALSE;	
	enabletool1 := FALSE;
	enabletool2 := FALSE;
	errorlamp := TRUE;
	initresetlamp:= FALSE;
	
	timerstart1:=TRUE;
	timertime1:= T#10MS;
	IF timer1reached THEN
		timerstart1:= FALSE;
		state := 0;
	END_IF
END_CASE


LinearAxis(
	enableAxis := enableaxis, 
	executeMove := executeLinearMove, 
	executeHometozero:=  executehometostop,
	pos := linearPos, 
	vel := linearVel, 
	resetaxis := resetaxis,
	refsensor :=NOT refsensorlinear,
	homingsearchvelocity:= linearsearchinghoming,
	posafterhoming:= linearposafterhoming,
	homingDoneTozero => linearhomingdone,
	posreached => linearmovingdone
);

RotationAxis(
	enableAxis := enableaxis, 
	executeMove := executerotationMove, 
	executeHometozero:= executehometozero,
	pos := rotationPos, 
	vel := rotationvel, 
	resetaxis := resetaxis,
	refsensor := refsensorrotation,
	homingsearchvelocity:= rotationsearchinghoming,
	posafterhoming := rotationposafterhoming,
	homingDoneToZero => rotationhomingdone,
	posreached => rotationmovingdone
);

timer2(in := timerstart2, pt := timertime2, et=> elapsedtime1, q=>timer2reached);
timer1(in := timerstart1, pt := timertime1, et=> elapsedtime2, q=> timer1reached);



//	 _ _______                                             _             
//	| (_______)                                        _  (_)            
//	| |_     _     ____ ___  ____  ____  _____  ____ _| |_ _ ____   ____ 
//	| | |   | |   / ___) _ \|  _ \|  _ \| ___ |/ ___|_   _) |  _ \ / _  |
//	| | |___| |  ( (__| |_| | | | | | | | ____( (___  | |_| | | | ( (_| |
//	|_|\_____/    \____)___/|_| |_|_| |_|_____)\____)  \__)_|_| |_|\___ |
//	                                                              (_____|

//inputs
tool1posreached := io.cilinderpos1;
tool2posreached := io.cilinderpos2;
resetbutton := io.resetbutton;
startbutton := io.startbutton;
stopbutton := NOT io.stopbutton;
estop1 := NOT io.estop1;
estop2 := io.estop2;
doorswitch := io.doorswitch;
powerok := io.powerok;
refsensorrotation := io.refrotation;
refsensorlinear := io.reflinear;

//outputs
io.enabletool1 := enabletool1;
io.enabletool2 := enabletool2;
io.cilindertopos1 := tool1pos;
io.cilindertopos2 := tool2pos;
io.initresetlamp:= initresetlamp;
io.processlamp := enableprocesslamp;
io.errorlamp := errorlamp;
io.enableledstrip := enableledstrip;



]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="4348" Count="5" />
      <LineId Id="4767" Count="0" />
      <LineId Id="4747" Count="6" />
      <LineId Id="4777" Count="0" />
      <LineId Id="4754" Count="4" />
      <LineId Id="4746" Count="0" />
      <LineId Id="4354" Count="1" />
      <LineId Id="4778" Count="1" />
      <LineId Id="4356" Count="72" />
      <LineId Id="4709" Count="1" />
      <LineId Id="4713" Count="1" />
      <LineId Id="4429" Count="13" />
      <LineId Id="4447" Count="0" />
      <LineId Id="4769" Count="0" />
      <LineId Id="4775" Count="0" />
      <LineId Id="4449" Count="4" />
      <LineId Id="4776" Count="0" />
      <LineId Id="4454" Count="5" />
      <LineId Id="4733" Count="1" />
      <LineId Id="4718" Count="0" />
      <LineId Id="4465" Count="1" />
      <LineId Id="4720" Count="0" />
      <LineId Id="4730" Count="1" />
      <LineId Id="4911" Count="0" />
      <LineId Id="4724" Count="0" />
      <LineId Id="4906" Count="0" />
      <LineId Id="4908" Count="1" />
      <LineId Id="4905" Count="0" />
      <LineId Id="4910" Count="0" />
      <LineId Id="4725" Count="3" />
      <LineId Id="4721" Count="2" />
      <LineId Id="4467" Count="15" />
      <LineId Id="4736" Count="0" />
      <LineId Id="4483" Count="12" />
      <LineId Id="4759" Count="0" />
      <LineId Id="4762" Count="4" />
      <LineId Id="4760" Count="1" />
      <LineId Id="4496" Count="110" />
      <LineId Id="5039" Count="0" />
      <LineId Id="4607" Count="21" />
      <LineId Id="5037" Count="1" />
      <LineId Id="4629" Count="16" />
      <LineId Id="4703" Count="0" />
      <LineId Id="4705" Count="0" />
      <LineId Id="4715" Count="0" />
      <LineId Id="4647" Count="11" />
      <LineId Id="4708" Count="0" />
      <LineId Id="4716" Count="0" />
      <LineId Id="4659" Count="38" />
      <LineId Id="4699" Count="2" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>